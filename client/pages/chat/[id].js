import Head from 'next/head';
import { useRouter } from 'next/router';
import { memo, useEffect, useRef, useState } from 'react'
import { Button, Form, InputGroup } from 'react-bootstrap'
import { useSelector } from 'react-redux';
import { getAllContacts } from '../../store/actions/contact';
import { wrapper } from '../../store/store';
import {io} from 'socket.io-client';
import s from '../../styles/Chat.module.css'

// console.log('rerendered')
 function Chat() {
    const router = useRouter();
    const { id } = router.query;
    const [loggedUser, setLoggedUser] = useState(null);
    const [messageUser, setMessageUser] = useState(null);
    const [connectedUsers, setConnectedUsers] = useState([]);
    const [messages, setMessages] = useState({});
    const [socket, setSocket] = useState(null)
    const inputRef = useRef();

    const { contacts = [] } = useSelector(state => ({
        contacts: state.page.contact?.data
    }));

    useEffect(() => {
        const socket = io("http://localhost:8080");
        setSocket(socket)
        console.log('socket.id', socket.id)
        socket.emit("newUser", id)
        socket.on(`message-${id}`, data => {
            console.log('working')
            setMessages(messages => {
                return {
                    ...messages,
                    [data.from]: messages[data.from] ? [...messages[data.from], { msg: data.msg }] : [{ msg: data.msg }]
                }
            });
        })
        socket.on('connectedUsers', function (data) {
            console.log('connectedUsers.id', data);
            setConnectedUsers(data?.map(item => item.id))
        });

        return () => {
            // socket.off('chat message');
            socket.off('connectedUsers');
            socket.off('message');
            socket.off(`message-${id}`);
            socket.disconnect();
        };
    }, []);

    useEffect(() => {
        const currentUser = contacts.find(item => item.id === id);
        setLoggedUser(currentUser)
    }, [contacts, id]);

    const [isSidebarOpen, setIsSidebarOpen] = useState(false);

    const handleMenuClick = id => {
        setIsSidebarOpen(v => !v);
        const messageUser = contacts.find(item => item.id === id);
        setMessageUser(messageUser);
    }

    const handleSend = () => {
        console.log("calling casend")
        let msg = inputRef.current.value;
        if (!msg) return;
        setMessages(messages => {
            return {
                ...messages,
                [messageUser.id]: messages[messageUser.id] ? [...messages[messageUser.id], { msg, isOwn: true }] : [{ msg, isOwn: true }]
            }
        });
        socket.emit("message", { from: loggedUser.id, to: messageUser.id, msg })
        inputRef.current.value = "";
    }

    return (
        <>
            <header className={s.header}>
                <div className={s.headerTitle} >
                    <div onClick={() => setIsSidebarOpen(v => !v)} className={s.hambarger}>
                        <svg xmlns="http://www.w3.org/2000/svg" width="38" height="38" fill="currentColor" className="bi bi-list" viewBox="0 0 16 16">
                            <path fillRule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z" />
                        </svg>
                    </div>
                    <div>
                        {messageUser?.firstName}
                    </div>
                </div>
                <div className={s.headerUserName}>
                    {loggedUser?.firstName}
                </div>
            </header>

            <div className={s.container}>
                <Head>
                    <title>Chat App</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>
                <aside className={`${s.sidebar} ${isSidebarOpen ? s.open : ""}`}>
                    <div>
                        {contacts.map((contact, i) => {
                            if (loggedUser?.id === contact.id) return;
                            // if(!connectedUsers.includes(contact.id)) return;
                            return (<div key={`CONTACTS_ITEM_${i}`} className={s.contactItem} onClick={() => handleMenuClick(contact.id)}>
                                <div className={s.contactImg} />
                                <div>{contact.firstName}</div>
                            </div>)
                        })}
                    </div>
                </aside>
                <main className={s.main} >
                    {messageUser &&  <div className={s.chatSection}>
                        <div className={s.chatMessageSection}>
                            <div>
                                {messages[messageUser.id] && messages[messageUser.id].map((item, i) => {
                                    return <div key={`MESSAGE_ITEM_${i}`} className={`${s.message} ${item.isOwn ? s.messageRight : ""}`}>
                                        <div className={s.messageContent}>{item.msg}</div>
                                    </div>
                                })}
                            </div>
                        </div>
                        <div className={s.messageForm}>
                            <InputGroup className="">
                                <Form.Control
                                    placeholder="Type a message"
                                    aria-label="Type a message"
                                    aria-describedby="basic-addon2"
                                    type='textarea'
                                    ref={inputRef}
                                    onKeyDown={e => {
                                        return (e.key === "Enter") ? handleSend() : ""
                                    }}
                                />
                                <Button variant='success' id="button-addon2" onClick={handleSend}>
                                    Send
                                </Button>
                            </InputGroup>
                        </div>
                    </div>}
                </main>

            </div>
        </>
    )
}

export default memo(Chat)


export const getServerSideProps = wrapper.getServerSideProps(
    (store) =>
        async ({ req, res }) => {
            await store.dispatch(getAllContacts())
            return {};
        }
);